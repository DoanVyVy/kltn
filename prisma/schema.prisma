generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
  schemas      = ["public"]
}

model User {
  username                 String                      @unique
  email                    String                      @unique
  passwordHash             String                      @map("password_hash")
  fullName                 String?                     @map("full_name")
  avatarUrl                String?                     @map("avatar_url")
  currentLevel             Int                         @default(1) @map("current_level")
  totalPoints              Int                         @default(0) @map("total_points")
  streakDays               Int                         @default(0) @map("streak_days")
  lastActiveDate           DateTime?                   @map("last_active_date")
  createdAt                DateTime                    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime                    @default(now()) @map("updated_at") @db.Timestamptz(6)
  userId                   String                      @id @default(uuid()) @map("user_id") @db.Uuid
  role                     String                      @default("user") @map("role")
  currentExp               Int                         @default(0) @map("current_exp")
  userAchievements         UserAchievement[]
  userProgress             UserProgress[]
  leaderboardEntries       LeaderboardEntry[]
  userLearningAnswers      UserLearningAnswer[]
  userReviewWords          UserReviewWord[]
  userReviewGrammars       UserReviewGrammar[]
  userGameCompletions      UserGameCompletion[]
  userDailyGameCompletions UserDailyGameCompletion[]

  @@map("users")
  @@schema("public")
}

model EventStore {
  eventId       Int      @id @default(autoincrement()) @map("event_id")
  userId        String   @map("user_id") @db.Uuid
  eventType     String   @map("event_type")
  eventData     Json?    @map("event_data") @db.Json
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  aggregateType String?  @map("aggregate_type")
  aggregateId   String?  @map("aggregate_id")

  @@index([userId])
  @@map("event_store")
  @@schema("public")
}

model Level {
  levelId        Int     @id @default(autoincrement()) @map("level_id")
  levelNumber    Int     @unique @map("level_number")
  levelName      String  @map("level_name")
  pointsRequired Int     @map("points_required")
  description    String?
  badgeUrl       String? @map("badge_url")

  @@map("levels")
  @@schema("public")
}

model Achievement {
  achievementId     Int               @id @default(autoincrement()) @map("achievement_id")
  title             String
  description       String
  iconUrl           String?           @map("icon_url")
  requiredCondition String?           @map("required_condition")
  points_reward     Int               @default(0)
  userAchievements  UserAchievement[]

  @@map("achievements")
  @@schema("public")
}

model UserAchievement {
  achievementId Int         @map("achievement_id")
  dateAchieved  DateTime    @default(now()) @map("date_achieved") @db.Timestamptz(6)
  userId        String      @map("user_id") @db.Uuid
  user          User        @relation(fields: [userId], references: [userId], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [achievementId], onDelete: Cascade)

  @@id([userId, achievementId])
  @@index([achievementId])
  @@map("user_achievements")
  @@schema("public")
}

model Category {
  categoryId         Int              @id @default(autoincrement()) @map("category_id")
  categoryName       String           @map("category_name")
  description        String?
  difficultyLevel    Int              @default(1) @map("difficulty_level")
  orderIndex         Int?             @map("order_index")
  totalWords         Int              @default(0) @map("total_words")
  totalGrammar       Int              @default(0) @map("total_grammar")
  status             String           @default("active")
  isVocabularyCourse Boolean          @default(true) @map("is_vocabulary_course")
  vocabularyWords    VocabularyWord[]
  grammarContents    GrammarContent[]
  userProgress       UserProgress[]

  @@map("categories")
  @@schema("public")
}

model VocabularyWord {
  wordId              Int                  @id @default(autoincrement()) @map("word_id")
  categoryId          Int                  @map("category_id")
  word                String
  pronunciation       String?
  partOfSpeech        String?              @map("part_of_speech")
  definition          String
  exampleSentence     String?              @map("example_sentence")
  audioUrl            String?              @map("audio_url")
  difficultyLevel     Int                  @default(1) @map("difficulty_level")
  paronymWords        String[]
  definitions         Json                 @default("[]") @db.Json
  imageUrl            String?              @map("image_url")
  videoUrl            String?              @map("video_url")
  category            Category             @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
  userLearningAnswers UserLearningAnswer[]
  userReviewWords     UserReviewWord[]

  @@index([categoryId])
  @@map("vocabulary_words")
  @@schema("public")
}

model GrammarContent {
  contentId           Int                  @id @default(autoincrement()) @map("content_id")
  title               String
  explanation         String
  examples            String?
  notes               String?
  orderIndex          Int?                 @map("order_index")
  categoryId          Int                  @map("category_id")
  imageUrl            String?              @map("image_url")
  videoUrl            String?              @map("video_url")
  syntax              String?              @map("syntax")
  category            Category             @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
  userLearningAnswers UserLearningAnswer[]
  userReviewGrammars  UserReviewGrammar[]

  @@index([categoryId])
  @@map("grammar_contents")
  @@schema("public")
}

model UserLearningAnswer {
  id        Int             @id @default(autoincrement())
  userId    String          @map("user_id") @db.Uuid
  wordId    Int?            @map("word_id")
  grammarId Int?            @map("grammar_id")
  isCorrect Boolean         @map("is_correct")
  createdAt DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  processId Int             @map("process_id")
  user      User            @relation(fields: [userId], references: [userId], onDelete: Cascade)
  word      VocabularyWord? @relation(fields: [wordId], references: [wordId], onDelete: SetNull)
  grammar   GrammarContent? @relation(fields: [grammarId], references: [contentId], onDelete: SetNull)
  progress  UserProgress    @relation(fields: [processId], references: [progressId], onDelete: Cascade)

  @@index([userId])
  @@index([wordId])
  @@index([grammarId])
  @@index([processId])
  @@map("user_learning_answers")
  @@schema("public")
}

model UserReviewWord {
  id      Int            @id @default(autoincrement())
  userId  String         @map("user_id") @db.Uuid
  wordId  Int            @map("word_id")
  addedAt DateTime       @default(now()) @map("added_at") @db.Timestamptz(6)
  user    User           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  word    VocabularyWord @relation(fields: [wordId], references: [wordId], onDelete: Cascade)

  @@unique([userId, wordId])
  @@index([userId])
  @@index([wordId])
  @@map("user_review_words")
  @@schema("public")
}

model UserReviewGrammar {
  id        Int            @id @default(autoincrement())
  userId    String         @map("user_id") @db.Uuid
  grammarId Int            @map("grammar_id")
  addedAt   DateTime       @default(now()) @map("added_at") @db.Timestamptz(6)
  user      User           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  grammar   GrammarContent @relation(fields: [grammarId], references: [contentId], onDelete: Cascade)

  @@index([userId])
  @@index([grammarId])
  @@map("user_review_grammar")
  @@schema("public")
}

model UserProgress {
  progressId          Int                  @id @default(autoincrement()) @map("progress_id")
  categoryId          Int?                 @map("category_id")
  masteryLevel        Decimal              @default(0) @map("mastery_level") @db.Decimal(5, 2)
  timesPracticed      Int                  @default(0) @map("times_practiced")
  lastPracticed       DateTime?            @map("last_practiced") @db.Timestamptz(6)
  nextReviewDate      DateTime?            @db.Timestamptz(6)
  userId              String               @map("user_id") @db.Uuid
  processPercentage   Int                  @default(0) @map("process_percentage")
  contentType         String               @default("vocabulary") @map("content_type")
  user                User                 @relation(fields: [userId], references: [userId], onDelete: Cascade)
  category            Category?            @relation(fields: [categoryId], references: [categoryId], onDelete: SetNull)
  userLearningAnswers UserLearningAnswer[]

  @@index([userId])
  @@index([categoryId])
  @@map("user_progress")
  @@schema("public")
}

model Leaderboard {
  leaderboardId Int                @id @default(autoincrement()) @map("leaderboard_id")
  name          String
  periodType    String             @map("period_type")
  startDate     DateTime?          @map("start_date") @db.Date
  endDate       DateTime?          @map("end_date") @db.Date
  entries       LeaderboardEntry[]

  @@map("leaderboards")
  @@schema("public")
}

model LeaderboardEntry {
  entryId       Int         @id @default(autoincrement()) @map("entry_id")
  leaderboardId Int         @map("leaderboard_id")
  score         Int
  rank          Int?
  updatedAt     DateTime    @default(now()) @map("updated_at") @db.Timestamptz(6)
  userId        String      @map("user_id") @db.Uuid
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [leaderboardId], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([leaderboardId, userId])
  @@index([userId])
  @@map("leaderboard_entries")
  @@schema("public")
}

model UserGameCompletion {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id") @db.Uuid
  gameType    String   @map("game_type")
  score       Int?
  timeTaken   Int?     @map("time_taken")
  completedAt DateTime @default(now()) @map("completed_at") @db.Timestamptz(6)
  expEarned   Int?     @map("exp_earned")
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@map("user_game_completions")
  @@schema("public")
}

model PronunciationContent {
  id               Int                      @id @default(autoincrement())
  type             String                   // "word", "sentence", "paragraph"
  content          String                   // The text to be pronounced
  audioUrl         String?                  @map("audio_url")
  translation      String?                  // Translation in Vietnamese
  difficulty       Int                      @default(1) // 1=beginner, 2=intermediate, 3=advanced
  category         String?                  // Optional category for organization
  expReward        Int                         @default(50) @map("exp_reward")
  isActive         Boolean                  @default(true) @map("is_active")
  createdAt        DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime                 @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([type])
  @@index([difficulty])
  @@index([category])
  @@map("pronunciation_contents")
  @@schema("public")
}


model UserPronunciationProgress {
  id                   Int                     @id @default(autoincrement())
  userId               String                  @map("user_id") @db.Uuid
  contentSetId         Int                     @map("content_set_id")
  totalAttempts        Int                     @default(0) @map("total_attempts")
  bestScore            Int                     @default(0) @map("best_score")
  completionStatus     String                  @default("not_started") @map("completion_status") // not_started, in_progress, completed, mastered
  lastAttemptedAt      DateTime?               @map("last_attempted_at") @db.Timestamptz(6)
  completedAt          DateTime?               @map("completed_at") @db.Timestamptz(6)
  contentItemsProgress Json                    @default("[]") @map("content_items_progress") @db.Json // Array of {contentId, bestScore, attempts, completed}
  createdAt            DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime                @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([userId, contentSetId])
  @@index([userId])
  @@index([contentSetId])
  @@index([completionStatus])
  @@map("user_pronunciation_progress")
  @@schema("public")
}

// Daily game tables

model DailyWordGuess {
  id                Int                        @id @default(autoincrement())
  word              String
  hint              String?
  definition        String
  partOfSpeech      String?                    @map("part_of_speech")
  imageUrl          String?                    @map("image_url")
  exampleSentence   String?                    @map("example_sentence")
  difficulty        Int                        @default(1) // 1=easy, 2=medium, 3=hard
  expReward         Int                        @default(50) @map("exp_reward")
  activeDate        DateTime                   @map("active_date") @db.Date
  createdAt         DateTime                   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime                   @updatedAt @map("updated_at") @db.Timestamptz(6)
  userCompletions   UserDailyGameCompletion[]
  
  @@index([activeDate])
  @@index([difficulty])
  @@map("daily_word_guess")
  @@schema("public")
}

model DailySentenceScramble {
  id                Int                        @id @default(autoincrement())
  sentence          String
  scrambledSentence String                     @map("scrambled_sentence")
  translation       String?
  hint              String?
  difficulty        Int                        @default(1) // 1=easy, 2=medium, 3=hard
  expReward         Int                        @default(50) @map("exp_reward")
  activeDate        DateTime                   @map("active_date") @db.Date
  createdAt         DateTime                   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime                   @updatedAt @map("updated_at") @db.Timestamptz(6)
  userCompletions   UserDailyGameCompletion[]
  
  @@index([activeDate])
  @@index([difficulty])
  @@map("daily_sentence_scramble")
  @@schema("public")
}

model DailyWordAssociation {
  id                Int                        @id @default(autoincrement())
  sourceWord        String                     @map("source_word")
  targetWords       String[]                   @map("target_words")
  correctWord       String                     @map("correct_word")
  hint              String?
  explanation       String?
  difficulty        Int                        @default(1) // 1=easy, 2=medium, 3=hard
  expReward         Int                        @default(50) @map("exp_reward")
  activeDate        DateTime                   @map("active_date") @db.Date
  createdAt         DateTime                   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime                   @updatedAt @map("updated_at") @db.Timestamptz(6)
  userCompletions   UserDailyGameCompletion[]
  
  @@index([activeDate])
  @@index([difficulty])
  @@map("daily_word_association")
  @@schema("public")
}

model DailyIdiomChallenge {
  id                Int                          @id @default(autoincrement())
  idiom             String
  meaning           String
  literalMeaning    String?                      @map("literal_meaning")
  exampleSentence   String?                      @map("example_sentence")
  options           String[]
  correctOption     String                       @map("correct_option")
  hint              String?
  difficulty        Int                          @default(1) // 1=easy, 2=medium, 3=hard
  expReward         Int                          @default(50) @map("exp_reward")
  activeDate        DateTime                     @map("active_date") @db.Date
  createdAt         DateTime                     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime                     @updatedAt @map("updated_at") @db.Timestamptz(6)
  userCompletions   UserDailyGameCompletion[]    
  
  @@index([activeDate])
  @@index([difficulty])
  @@map("daily_idiom_challenge")
  @@schema("public")
}

model UserDailyGameCompletion {
  id                Int                   @id @default(autoincrement())
  userId            String                @map("user_id") @db.Uuid
  gameDate          DateTime              @map("game_date") @db.Date
  gameType          String                @map("game_type") // "word-guess", "sentence-scramble", "word-association", "idiom-challenge"
  wordGuessId       Int?                  @map("word_guess_id")
  sentenceScrambleId Int?                 @map("sentence_scramble_id")
  wordAssociationId Int?                  @map("word_association_id")
  idiomChallengeId  Int?                  @map("idiom_challenge_id") 
  completed         Boolean               @default(false)
  score             Int?
  timeTaken         Int?                  @map("time_taken") // in seconds
  attempts          Int                   @default(1)
  expEarned         Int?                  @map("exp_earned")
  completedAt       DateTime?             @map("completed_at") @db.Timestamptz(6)
  createdAt         DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime              @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  user              User                  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  wordGuess         DailyWordGuess?       @relation(fields: [wordGuessId], references: [id], onDelete: SetNull)
  sentenceScramble  DailySentenceScramble? @relation(fields: [sentenceScrambleId], references: [id], onDelete: SetNull)
  wordAssociation   DailyWordAssociation? @relation(fields: [wordAssociationId], references: [id], onDelete: SetNull)
  idiomChallenge    DailyIdiomChallenge?  @relation(fields: [idiomChallengeId], references: [id], onDelete: SetNull)

  @@unique([userId, gameDate, gameType])
  @@index([userId])
  @@index([gameType])
  @@index([gameDate])
  @@index([completedAt])
  @@index([wordGuessId])
  @@index([sentenceScrambleId])
  @@index([wordAssociationId])
  @@index([idiomChallengeId])
  @@map("user_daily_game_completions")
  @@schema("public")
}


